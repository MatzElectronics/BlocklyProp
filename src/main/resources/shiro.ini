#
# Copyright (c) 2019 Parallax Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the “Software”), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

[main]

# ---------------
# Session Manager
# ---------------
# Web-application capable SessionManager implementation. This provides a
# handler for HttpRequest and HttpResponse integrated with the Shiro system.
# The security manager will use the DefaultWebSessionManager interface.
# --------------------------------------------------------------------------
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager

# -------------------------
# Enable session ID cookies
# -------------------------
securityManager.sessionManager.sessionIdCookieEnabled = true

# --------------------------------------------------------------------------
# Disable session management when operating within a multi-host environment
# --------------------------------------------------------------------------
securityManager.sessionManager.deleteInvalidSessions = false
securityManager.sessionManager.sessionValidationSchedulerEnabled = false
securityManager.sessionManager.globalSessionTimeout = 28800000


# Attach the default session validation scheduler
sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
securityManager.sessionManager.sessionValidationScheduler = $sessionValidationScheduler

# Run once per day
securityManager.sessionManager.sessionValidationScheduler.interval = 86400000


# ----------------
# Backing Storage
# ----------------
#
# Configure the SessionDao to use the BlocklyPropSessionDao class to implement
# the SessionDao interface. Configure the Security Manager to use this interface
# to persist session data to a backend EIS
# -------------------------------------------------------------------------------
sessionDao = com.parallax.server.blocklyprop.security.BlocklyPropSessionDao
securityManager.sessionManager.sessionDAO = $sessionDao



# Security Manager Backend Storage (User Accounts)
# -------------------------------------------------
# Define interface to the backend storage to hold user credentials. This is the
# Cloud Session interface for user authentication
cloudsessionRealm = com.parallax.server.blocklyprop.security.CloudSessionAuthenticationRealm
securityManager.realms = $cloudsessionRealm


# Credential Matching
# -------------------
# Supports direct (plain) comparison for credentials of type byte[], char[],
# and Strings, and if the arguments do not match these types, then reverts back
# to simple Object.equals comparison.
credentialsMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher

#============================================
# TODO: Determine if this should be wired up
#============================================
# This appears to be implemented and not referenced in this configuration file
cloudSessionMatcher = com.parallax.server.blocklyprop.security.CloudSessionCredentialsMatcher


#######  TESTING AND DEV SETTINGS ########
# A credentials matcher that always returns true when matching credentials no matter
# what arguments are passed in. This can be used for testing or when credentials are
# implicitly trusted for a particular Realm.
# -----------------------------------------------------------------------------------
# allow_all_credentialsMatcher = org.apache.shiro.authc.credential.AllowAllCredentialsMatcher
#-##########################################################################################



ssl.enabled = false
shiro.loginUrl = /login.jsp


# Static user accounts go here
# ----------------------------
[users]


# Authorization through roles is implemented here
# -----------------------------------------------
[roles]


# Manager access to urls and url groups
# --------------------------------------
[urls]
#
# A list of accessable URLs
#
# CDN (data, local during development) (maybe add a hotlink protection?)
/cdn/** = anon

# Regsitration, authentication, password reset
/login.jsp = authc, ssl
/logout = logout, ssl
/authenticate = anon, ssl
/oauth/** = anon, ssl

#Secure pages
/register = anon, ssl
/confirmrequest = anon, ssl
/confirm = anon, ssl
/resetrequest = anon, ssl
/reset = anon, ssl

# Public pages
/ = anon, ssl
/index = anon, ssl

# Display community projects
/projects.jsp = anon, ssl

/public/** = anon
/ping = anon
/sessionapi = anon
/demo/** = anon, ssl
/frame/** = anon, ssl
/projectlink = anon, ssl
/privacy-policy = anon, ssl
/libraries = anon, ssl
/license = anon, ssl
/help = anon, ssl
/releases = anon, ssl
/client = anon, ssl
/motd = anon

# REST api and api documentation
/apidoc = anon
/rest/shared/** = anon, ssl

# Version 2 of the Blockly API
/rest/v2/** = authc, ssl
# /rest/v2/** = anon, ssl

# Version 1 of the Blockly API
/rest/** = authc, ssl
# /rest/** = anon, ssl




# Authorized projects
/createproject = authc, noSessionCreation, ssl
/new-project = authc, noSessionCreation, ssl

# Application pages
/** = authc, user, ssl

#Testing


