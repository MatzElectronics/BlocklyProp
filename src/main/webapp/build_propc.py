#!/usr/bin/python
# Compresses the Propeller C BlocklyProp generator files into a 
# single JavaScript file.
#
# Copyright 2012 Google Inc.
# http://blockly.googlecode.com/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script generates two files:
#   propc_js_compressed.js
#   propc_js_uncompressed.js
# The compressed file is a concatenation of all of Blockly's core files which
# have been run through Google's Closure Compiler.  This is done using the
# online API (which takes a few seconds and requires an Internet connection).
# The uncompressed file is a script that loads in each of Blockly's core files
# one by one.  This takes much longer for a browser to load, but may be useful
# when debugging code since line numbers are meaningful and variables haven't
# been renamed.  The uncompressed file also allows for a faster development
# cycle since there is no need to rebuild or recompile, just reload.

import httplib, json, urllib, sys, os

filenames_libs = [
    "cdn/lib/chartist.min.js",
    "cdn/lib/jquery-1.11.3.min.js",
    "cdn/lib/beautify.min.js",
    "cdn/lib/bootstrap/core/js/bootstrap.min.js",
    "cdn/lib/bootstrap/plugins/bootbox.min.js"
]

filenames_setups = [
    "cdn/propterm.js",
    "cdn/detect.js",
    "cdn/blocklypropclient.js",
    "cdn/blocklyc.js",
    "cdn/utils.js",
    "cdn/editor.js"
]

filenames_cores = [
    "cdn/blockly/apps/blockly_compressed.js",
    "cdn/blockly/generators/propc.js",
    "cdn/blockly/generators/field_range.js",
    "cdn/blockly/language/en/_messages.js"
]

filenames_gens = [
    "cdn/blockly/generators/propc/base.js",
    "cdn/blockly/generators/propc/control.js",
    "cdn/blockly/generators/propc/variables.js",
    "cdn/blockly/generators/propc/procedures.js",
    "cdn/blockly/generators/propc/gpio.js",
    "cdn/blockly/generators/propc/communicate.js",
    "cdn/blockly/generators/propc/sensors.js",
    "cdn/blockly/generators/propc/heb.js",
    "cdn/blockly/generators/propc/s3.js"
]

filenames_styles = [
        "cdn/lib/chartist.min.css",
        "cdn/lib/bootstrap/core/css/bootstrap.min.css",
        "cdn/style-editor.css",
        "cdn/style-clientdownload.css",
]

header = ('// Do not edit this file; automatically generated by build_propc.py.\n'
          '"use strict";')

def gen_compressed_css(filenames, target_filename):
  inc = ''
  for filename in filenames:
    f = open(filename)
    inc = inc + f.read()
    f.close()

  inc = inc.replace("url('images", "url('../images")

  params = [('input', inc)]


  headers = { "Content-type": "application/x-www-form-urlencoded" }
  conn = httplib.HTTPSConnection('cssminifier.com')
  conn.request('POST', '/raw', urllib.urlencode(params), headers)
  response = conn.getresponse()
  res = response.read()
  conn.close

  f = open(target_filename, 'w')
  f.write(res)
  f.close()

  original_kb = int(len(inc) / 1024 + 0.5)
  compressed_kb = int(len(res) / 1024 + 0.5)
  ratio = int(float(compressed_kb) / float(original_kb) * 100 + 0.5)
  print 'SUCCESS: ' + target_filename
  print 'Size changed from %d KB to %d KB (%d%%).' % (original_kb, compressed_kb, ratio)


def gen_uncompressed(filenames, target_filename):
  #target_filename = 'propc_js_uncompressed.js'
  inc = ''

  for filename in filenames:
    f = open(filename)
    inc = inc + f.read() + '\n'
    f.close()


  f = open(target_filename, 'w')
  f.write(inc)
  f.close()
  print 'SUCCESS: ' + target_filename

def gen_compressed(filenames, target_filename):
  #target_filename = 'propc_js_compressed.js'
  # Define the parameters for the POST request.
  params = [
      ('compilation_level', 'SIMPLE_OPTIMIZATIONS'),
      ('use_closure_library', 'true'),
      ('output_format', 'json'),
      ('output_info', 'compiled_code'),
      ('output_info', 'warnings'),
      ('output_info', 'errors'),
      ('output_info', 'statistics'),
    ]

  # Read in all the source files.
  for filename in filenames:
    f = open(filename)
    params.append(('js_code', ''.join(f.readlines())))
    f.close()

  # Send the request to Google.
  headers = { "Content-type": "application/x-www-form-urlencoded" }
  conn = httplib.HTTPSConnection('closure-compiler.appspot.com')
  conn.request('POST', '/compile', urllib.urlencode(params), headers)
  response = conn.getresponse()
  json_str = response.read()
  conn.close

  # Parse the JSON response.
  json_data = json.loads(json_str)

  def file_lookup(name):
    if not name.startswith('Input_'):
      return '???'
    n = int(name[6:])
    return filenames[n]

  if json_data.has_key('errors'):
    errors = json_data['errors']
    for error in errors:
      print 'FATAL ERROR'
      print error['error']
      print '%s at line %d:' % (
          file_lookup(error['file']), error['lineno'])
      print error['line']
      print (' ' * error['charno']) + '^'
  else:
    if json_data.has_key('warnings'):
      warnings = json_data['warnings']
      for warning in warnings:
        print 'WARNING'
        print warning['warning']
        print '%s at line %d:' % (
            file_lookup(warning['file']), warning['lineno'])
        print warning['line']
        print (' ' * warning['charno']) + '^'
      print

    code = header + '\n' + json_data['compiledCode']

    stats = json_data['statistics']
    original_b = stats['originalSize']
    compressed_b = stats['compressedSize']
    if original_b > 0 and compressed_b > 0:
      f = open(target_filename, 'w')
      f.write(code)
      f.close()

      original_kb = int(original_b / 1024 + 0.5)
      compressed_kb = int(compressed_b / 1024 + 0.5)
      ratio = int(float(compressed_b) / float(original_b) * 100 + 0.5)
      print 'SUCCESS: ' + target_filename
      print 'Size changed from %d KB to %d KB (%d%%).' % (
          original_kb, compressed_kb, ratio)
    else:
      print 'UNKNOWN ERROR'

if __name__ == '__main__':

  #clear out the directory containing previous versions of compressed files
  dirPath = "cdn/compressed"
  fileList = os.listdir(dirPath)
  for fileName in fileList:
    os.remove(dirPath+"/"+fileName)

  gen_uncompressed(filenames_cores, 'cdn/compressed/propc_cores' + sys.argv[1] + '.js')
  gen_uncompressed(filenames_libs, 'cdn/compressed/propc_libs' + sys.argv[1] + '.js')
  gen_compressed(filenames_setups, 'cdn/compressed/propc_setups' + sys.argv[1] + '.min.js')
  gen_compressed(filenames_gens, 'cdn/compressed/propc_gens' + sys.argv[1] + '.min.js')
  gen_compressed_css(filenames_styles, 'cdn/compressed/propc_styles' + sys.argv[1] + '.css')

  #generate the file to be included in the blocklyc.jsp file
  inc = '<%--\nDO NOT EDIT THIS FILE!\nThis file is auto-generated by build_propc.py\n'
  inc = inc + 'See that file for a list of files that are compressed and included.\n--%>\n'
  inc = inc + '<script type="text/javascript" src="<url:getCdnUrl url="/ace/ace.js"/>"></script>\n'
  inc = inc + '<script type="text/javascript" src="<url:getCdnUrl url="/compressed/propc_libs' + sys.argv[1] + '.js"/>"></script>\n'
  inc = inc + '<script type="text/javascript" src="<url:getCdnUrl url="/compressed/propc_setups' + sys.argv[1] + '.min.js"/>"></script>\n'
  inc = inc + '<script type="text/javascript" src="<url:getCdnUrl url="/compressed/propc_cores' + sys.argv[1] + '.js"/>"></script>\n'
  inc = inc + '<script type="text/javascript" src="<url:getCdnUrl url="/compressed/propc_gens' + sys.argv[1] + '.min.js"/>"></script>\n'
  inc = inc + '<link type="text/css" href="<url:getCdnUrl url="/compressed/propc_styles' + sys.argv[1] + '.css"/>" rel="stylesheet" />\n'

  f = open('WEB-INF/includes/jsheaders.jsp', 'w')
  f.write(inc)
  f.close()
  print 'Header include written for build ' + sys.argv[1]