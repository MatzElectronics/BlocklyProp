/**
 * This class is generated by jOOQ
 */
package com.parallax.server.blocklyprop.db.generated.tables;


import com.parallax.server.blocklyprop.db.generated.Blocklyprop;
import com.parallax.server.blocklyprop.db.generated.Keys;
import com.parallax.server.blocklyprop.db.generated.tables.records.FriendRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friend extends TableImpl<FriendRecord> {

	private static final long serialVersionUID = -1271796427;

	/**
	 * The reference instance of <code>blocklyprop.friend</code>
	 */
	public static final Friend FRIEND = new Friend();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FriendRecord> getRecordType() {
		return FriendRecord.class;
	}

	/**
	 * The column <code>blocklyprop.friend.id</code>.
	 */
	public final TableField<FriendRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.friend.idRequestUser</code>.
	 */
	public final TableField<FriendRecord, Long> IDREQUESTUSER = createField("idRequestUser", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.friend.idRequestedUser</code>.
	 */
	public final TableField<FriendRecord, Long> IDREQUESTEDUSER = createField("idRequestedUser", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.friend.requested</code>.
	 */
	public final TableField<FriendRecord, Timestamp> REQUESTED = createField("requested", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>blocklyprop.friend.accepted</code>.
	 */
	public final TableField<FriendRecord, Timestamp> ACCEPTED = createField("accepted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.friend.request_sent_count</code>.
	 */
	public final TableField<FriendRecord, Integer> REQUEST_SENT_COUNT = createField("request_sent_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>blocklyprop.friend.request_last_sent</code>.
	 */
	public final TableField<FriendRecord, Timestamp> REQUEST_LAST_SENT = createField("request_last_sent", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "");

	/**
	 * Create a <code>blocklyprop.friend</code> table reference
	 */
	public Friend() {
		this("friend", null);
	}

	/**
	 * Create an aliased <code>blocklyprop.friend</code> table reference
	 */
	public Friend(String alias) {
		this(alias, FRIEND);
	}

	private Friend(String alias, Table<FriendRecord> aliased) {
		this(alias, aliased, null);
	}

	private Friend(String alias, Table<FriendRecord> aliased, Field<?>[] parameters) {
		super(alias, Blocklyprop.BLOCKLYPROP, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<FriendRecord, Long> getIdentity() {
		return Keys.IDENTITY_FRIEND;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<FriendRecord> getPrimaryKey() {
		return Keys.KEY_FRIEND_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<FriendRecord>> getKeys() {
		return Arrays.<UniqueKey<FriendRecord>>asList(Keys.KEY_FRIEND_PRIMARY, Keys.KEY_FRIEND_FRIEND_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<FriendRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<FriendRecord, ?>>asList(Keys.FRIEND_REQUEST_USER_ID_FK, Keys.FRIEND_REQUESTED_USER_ID_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Friend as(String alias) {
		return new Friend(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Friend rename(String name) {
		return new Friend(name, null);
	}
}
