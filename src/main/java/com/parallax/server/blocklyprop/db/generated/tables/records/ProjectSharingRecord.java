/**
 * This class is generated by jOOQ
 */
package com.parallax.server.blocklyprop.db.generated.tables.records;


import com.parallax.server.blocklyprop.db.generated.tables.ProjectSharing;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectSharingRecord extends UpdatableRecordImpl<ProjectSharingRecord> implements Record5<Long, Long, String, Boolean, Timestamp> {

	private static final long serialVersionUID = 157322653;

	/**
	 * Setter for <code>blocklyprop.project_sharing.id</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>blocklyprop.project_sharing.id</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>blocklyprop.project_sharing.id_project</code>.
	 */
	public void setIdProject(Long value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>blocklyprop.project_sharing.id_project</code>.
	 */
	public Long getIdProject() {
		return (Long) getValue(1);
	}

	/**
	 * Setter for <code>blocklyprop.project_sharing.sharekey</code>.
	 */
	public void setSharekey(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>blocklyprop.project_sharing.sharekey</code>.
	 */
	public String getSharekey() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>blocklyprop.project_sharing.expires</code>.
	 */
	public void setExpires(Boolean value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>blocklyprop.project_sharing.expires</code>.
	 */
	public Boolean getExpires() {
		return (Boolean) getValue(3);
	}

	/**
	 * Setter for <code>blocklyprop.project_sharing.exprire_date</code>.
	 */
	public void setExprireDate(Timestamp value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>blocklyprop.project_sharing.exprire_date</code>.
	 */
	public Timestamp getExprireDate() {
		return (Timestamp) getValue(4);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Long, Long, String, Boolean, Timestamp> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Long, Long, String, Boolean, Timestamp> valuesRow() {
		return (Row5) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return ProjectSharing.PROJECT_SHARING.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return ProjectSharing.PROJECT_SHARING.ID_PROJECT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return ProjectSharing.PROJECT_SHARING.SHAREKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field4() {
		return ProjectSharing.PROJECT_SHARING.EXPIRES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field5() {
		return ProjectSharing.PROJECT_SHARING.EXPRIRE_DATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getIdProject();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getSharekey();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value4() {
		return getExpires();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value5() {
		return getExprireDate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectSharingRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectSharingRecord value2(Long value) {
		setIdProject(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectSharingRecord value3(String value) {
		setSharekey(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectSharingRecord value4(Boolean value) {
		setExpires(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectSharingRecord value5(Timestamp value) {
		setExprireDate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectSharingRecord values(Long value1, Long value2, String value3, Boolean value4, Timestamp value5) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ProjectSharingRecord
	 */
	public ProjectSharingRecord() {
		super(ProjectSharing.PROJECT_SHARING);
	}

	/**
	 * Create a detached, initialised ProjectSharingRecord
	 */
	public ProjectSharingRecord(Long id, Long idProject, String sharekey, Boolean expires, Timestamp exprireDate) {
		super(ProjectSharing.PROJECT_SHARING);

		setValue(0, id);
		setValue(1, idProject);
		setValue(2, sharekey);
		setValue(3, expires);
		setValue(4, exprireDate);
	}
}
